[{"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\index.js":"1","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\reportWebVitals.js":"2","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\App.js":"3","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\components-container\\components-container.component.jsx":"4","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\parameters-plot\\parameters-plot.component.jsx":"5","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-2d\\projection-2d.component.jsx":"6","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\clusters\\clusters.component.jsx":"7","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-2d\\projection-2d-d3.component.jsx":"8","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\query-panel\\query-panel.component.jsx":"9","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-3d\\projection-3d.component.jsx":"10","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\data-component\\particleData.js":"11","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-3d\\projection.component.jsx":"12","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\dropdown-panel\\dropdown-panel.component.jsx":"13"},{"size":517,"mtime":1611004987524,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1611004987524,"results":"16","hashOfConfig":"15"},{"size":355,"mtime":1611004987506,"results":"17","hashOfConfig":"15"},{"size":9220,"mtime":1611333376345,"results":"18","hashOfConfig":"15"},{"size":296,"mtime":1611004987507,"results":"19","hashOfConfig":"15"},{"size":346,"mtime":1611276551382,"results":"20","hashOfConfig":"15"},{"size":297,"mtime":1611004987507,"results":"21","hashOfConfig":"15"},{"size":2270,"mtime":1611333376364,"results":"22","hashOfConfig":"15"},{"size":651,"mtime":1611333376402,"results":"23","hashOfConfig":"15"},{"size":5372,"mtime":1611333376375,"results":"24","hashOfConfig":"15"},{"size":653,"mtime":1611333376347,"results":"25","hashOfConfig":"15"},{"size":5302,"mtime":1611333376387,"results":"26","hashOfConfig":"15"},{"size":7459,"mtime":1611333376347,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hl01ak",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\index.js",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\reportWebVitals.js",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\App.js",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\components-container\\components-container.component.jsx",["59","60","61","62"],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\parameters-plot\\parameters-plot.component.jsx",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-2d\\projection-2d.component.jsx",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\clusters\\clusters.component.jsx",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-2d\\projection-2d-d3.component.jsx",["63","64"],"\r\nimport * as d3 from 'd3';\r\nimport { ReplaceStencilOp } from 'three';\r\n\r\nconst url =\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv\"\r\nexport default class ProjeProjection2DD3 {\r\n    constructor(element){\r\n        const width=300\r\n        const height=200\r\n        const svg = d3.select(element)\r\n                    .append(\"svg\")\r\n                    .attr(\"width\",400)\r\n                    .attr(\"height\",240)\r\n\r\n                    d3.csv(url).then(data => {\r\n\r\n                        // Add X axis\r\n                        var x = d3.scaleLinear()\r\n                          .domain([0, 4000])\r\n                          .range([ 0, width ]);\r\n                        svg.append(\"g\")\r\n                          .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                          .call(d3.axisBottom(x));\r\n                      \r\n                        // Add Y axis\r\n                        var y = d3.scaleLinear()\r\n                          .domain([0, 500000])\r\n                          .range([ height, 0]);\r\n                        svg.append(\"g\")\r\n                          .call(d3.axisLeft(y));\r\n                      \r\n                        // Add dots\r\n                        svg.append('g')\r\n                          .selectAll(\"dot\")\r\n                          .data(data)\r\n                          .enter()\r\n                          .append(\"circle\")\r\n                            .attr(\"cx\", function (d) { return x(d.GrLivArea); } )\r\n                            .attr(\"cy\", function (d) { return y(d.SalePrice); } )\r\n                            .attr(\"r\", 1.5)\r\n                            .style(\"fill\", \"#69b3a2\")\r\n                      \r\n                      })\r\n\r\n  }\r\n}\r\n\r\n",["65","66"],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\query-panel\\query-panel.component.jsx",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-3d\\projection-3d.component.jsx",["67","68"],"import React from 'react';\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst style = {\r\n    height: 240 // we can control scene size by setting container dimensions\r\n  };\r\n\r\nclass Projection3D extends React.Component {\r\n    componentDidMount() {\r\n        this.sceneSetup();\r\n        this.addCustomSceneObjects();\r\n        this.startAnimationLoop();\r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleWindowResize);\r\n        window.cancelAnimationFrame(this.requestID);\r\n        this.controls.dispose();\r\n      }\r\n    \r\n      // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\r\n      // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\r\n      sceneSetup = () => {\r\n        // get container dimensions and use them for scene sizing\r\n        const width = this.el.clientWidth;\r\n        const height = this.el.clientHeight;\r\n    \r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(\r\n          75, // fov = field of view\r\n          width / height, // aspect ratio\r\n          0.1, // near plane\r\n          1000 // far plane\r\n        );\r\n        this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\r\n        // OrbitControls allow a camera to orbit around the object\r\n        // https://threejs.org/docs/#examples/controls/OrbitControls\r\n        this.controls = new OrbitControls(this.camera, this.el);\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(width, height);\r\n        this.el.appendChild(this.renderer.domElement); // mount using React ref\r\n      };\r\n    \r\n      // Here should come custom code.\r\n      // Code below is taken from Three.js BoxGeometry example\r\n      // https://threejs.org/docs/#api/en/geometries/BoxGeometry\r\n      addCustomSceneObjects = () => {\r\n        const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n        const material = new THREE.MeshPhongMaterial({\r\n          color: 0x156289,\r\n          emissive: 0x072534,\r\n          side: THREE.DoubleSide,\r\n          flatShading: true\r\n        });\r\n        this.cube = new THREE.Mesh(geometry, material);\r\n        this.scene.add(this.cube);\r\n    \r\n        const lights = [];\r\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n    \r\n        lights[0].position.set(0, 200, 0);\r\n        lights[1].position.set(100, 200, 100);\r\n        lights[2].position.set(-100, -200, -100);\r\n    \r\n        this.scene.add(lights[0]);\r\n        this.scene.add(lights[1]);\r\n        this.scene.add(lights[2]);\r\n      };\r\n    \r\n      startAnimationLoop = () => {\r\n        this.cube.rotation.x += 0.01;\r\n        this.cube.rotation.y += 0.01;\r\n    \r\n        this.renderer.render(this.scene, this.camera);\r\n    \r\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n        // an animation and requests that the browser call a specified function\r\n        // to update an animation before the next repaint\r\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\r\n      };\r\n    \r\n      handleWindowResize = () => {\r\n        const width = this.el.clientWidth;\r\n        const height = this.el.clientHeight;\r\n    \r\n        this.renderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n    \r\n        // Note that after making changes to most of camera properties you have to call\r\n        // .updateProjectionMatrix for the changes to take effect.\r\n        this.camera.updateProjectionMatrix();\r\n      };\r\n    \r\n      render() {\r\n        return <div style={style} ref={ref => (this.el = ref)} />;\r\n      }\r\n    }\r\n\r\nexport default Projection3D;\r\n\r\n\r\n\r\n\r\n// class Projection3D extends Component {\r\n// componentDidMount() {\r\n//     var scene = new THREE.Scene();\r\n//     var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n//     var renderer = new THREE.WebGLRenderer();\r\n//     renderer.setSize( window.innerWidth, window.innerHeight );\r\n//     // document.body.appendChild( renderer.domElement );\r\n//     // use ref as a mount point of the Three.js scene instead of the document.body\r\n//     this.mount.appendChild( renderer.domElement );\r\n//     var geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n//     var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n//     var cube = new THREE.Mesh( geometry, material );\r\n//     scene.add( cube );\r\n//     camera.position.z = 5;\r\n//     var animate = function () {\r\n//       requestAnimationFrame( animate );\r\n//       cube.rotation.x += 0.01;\r\n//       cube.rotation.y += 0.01;\r\n//       renderer.render( scene, camera );\r\n//     };\r\n//     animate();\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div ref={ref => (this.mount = ref)} />\r\n//     )\r\n//   }\r\n// }","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\data-component\\particleData.js",[],"D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\projection-3d\\projection.component.jsx",["69","70"],"import React from 'react';\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport * as d3 from 'd3'\r\nimport { VertexColors } from 'three';\r\n\r\nconst style = {\r\n    height: 240 // we can control scene size by setting container dimensions\r\n  };\r\n\r\nclass Projection extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.renderer = null;\r\n        this.controls = null;\r\n    }    \r\n\r\n      // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\r\n      // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\r\n      sceneSetup = (containerName, canvasName) => {\r\n        // get container dimensions and use them for scene sizing\r\n        const width = d3.select(containerName).node().clientWidth\r\n        // console.log(width)\r\n        const height = d3.select(containerName).node().clientHeight;\r\n        // console.log(height)\r\n    \r\n        this.scene = new THREE.Scene();\r\n        // var scene = new THREE.Scene(); // initialising the scene\r\n        this.scene.background = new THREE.Color( 0x31393F );\r\n\r\n        //camera\r\n        const fieldOfView = 4;\r\n        const aspect = width / height;\r\n        const near = 0.5;\r\n        const far = 1000;\r\n\r\n\r\n        this.camera = new THREE.PerspectiveCamera(\r\n          fieldOfView, // fov = field of view\r\n          aspect, // aspect ratio\r\n          near, // near plane\r\n          far // far plane\r\n        );\r\n        // this.camera.position.x = 30;\r\n        // this.camera.position.y = 10\r\n        this.camera.position.z = 40; // is used here to set some distance from a cube that is located at z = 0\r\n        // OrbitControls allow a camera to orbit around the object\r\n        // https://threejs.org/docs/#examples/controls/OrbitControls\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        // this.renderer.setClearColor('hsl(0, 0%, 0%)', 0);\r\n        this.renderer.setSize(width, height);\r\n        // this.renderer.setPixelRatio(window.devicePixelRatio)\r\n\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n\r\n        canvasName.appendChild(this.renderer.domElement); // mount using React ref\r\n      };\r\n    \r\n\r\n      //adding the particle system\r\n      addCustomSceneObjects = (data, domainData) => {\r\n        this.tempColor = [\"#fff5f0\",\"#67000d\"]\r\n        // console.log(domainData)\r\n        let tempscaling = d3.scaleLinear(/*d3.schemeReds[9]*/)\r\n                        .domain([domainData.min, domainData.max])\r\n                        .range(this.tempColor);\r\n\r\n        // console.log(tempscaling(292))\r\n\r\n        // console.log(this.props.data)\r\n        let geometry = new THREE.Geometry();\r\n        // console.log(data)\r\n        data.forEach(function(d){ \r\n          geometry.vertices.push(new THREE.Vector3(d.x, d.y, d.z));\r\n          let color = tempscaling(d.temp)\r\n        //   console.log(color)\r\n          geometry.colors.push(new THREE.Color(color));\r\n        })\r\n        if(this.cube){\r\n          this.scene.remove(this.cube)\r\n        }\r\n        \r\n        let material = new THREE.PointsMaterial({\r\n            //   color: 0x156289,\r\n              // emissive: 0x072534,\r\n              size: 0.2,\r\n              // side: THREE.DoubleSide,\r\n              // flatShading: true\r\n              vertexColors: true\r\n            });\r\n\r\n        this.cube = new THREE.Points(geometry, material);\r\n        this.scene.add(this.cube);\r\n    \r\n        const lights = [];\r\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n    \r\n        lights[0].position.set(0, 200, 0);\r\n        lights[1].position.set(100, 200, 100);\r\n        lights[2].position.set(-100, -200, -100);\r\n    \r\n        this.scene.add(lights[0]);\r\n        this.scene.add(lights[1]);\r\n        this.scene.add(lights[2]);\r\n\r\n        this.startAnimationLoop();\r\n        \r\n      };\r\n    \r\n      startAnimationLoop = () => {\r\n        // this.cube.rotation.x += 0.01;\r\n        // this.cube.rotation.y += 0.01;\r\n    \r\n        this.renderer.render(this.scene, this.camera);\r\n    \r\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n        // an animation and requests that the browser call a specified function\r\n        // to update an animation before the next repaint\r\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\r\n      };\r\n    \r\n      handleWindowResize = (containerName) => {\r\n        const width = d3.select(containerName).node().clientWidth\r\n        // console.log(width)\r\n        const height = d3.select(containerName).node().clientHeight;\r\n    \r\n        this.renderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n    \r\n        // Note that after making changes to most of camera properties you have to call\r\n        // .updateProjectionMatrix for the changes to take effect.\r\n        this.camera.updateProjectionMatrix();\r\n      };\r\n\r\n      widnowResizeHandler = (containerName) => {\r\n        window.addEventListener(\"resize\", this.handleWindowResize(containerName));\r\n      }\r\n    }\r\n\r\nexport default Projection;\r\n","D:\\RA Project\\High Performance Contrsails\\Contrails\\src\\components\\dropdown-panel\\dropdown-panel.component.jsx",["71","72","73","74"],"import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport $, { data } from 'jquery'\r\n\r\nimport dataRegistry from '../data-component/dataRegistry.json'\r\n\r\nimport mainComponent from '../components-container/components-container.component'\r\n\r\nclass DropdownPanel extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n    createDropdown = (object,threeDivname, memberNumber, divName, idName, objectForScatter, divForScatter) =>{\r\n        let list = dataRegistry[(memberNumber - 1)].timeSteps;\r\n        // console.log(divName.className)\r\n        d3.select(divName).append('label')\r\n                         .attr('for', 'members')\r\n                         .text(\"Members: \")\r\n\r\n        d3.select(divName).append('select')\r\n                        .attr('class', \"members\")\r\n                        .attr(\"id\", `member${idName}`)\r\n                        .on('change', function(){\r\n                            let folder = this.value\r\n                            let list = dataRegistry[(folder - 1)].timeSteps\r\n                            // console.log(folder)\r\n                            // console.log(list)\r\n                            updateDropdown(folder, list, idName)\r\n                        })\r\n                        .selectAll('option')\r\n                        .data(dataRegistry)\r\n                        .enter()\r\n                        .append('option')\r\n                        .attr('id', function(d){ return d.ensembleMember})\r\n                        .attr(\"value\", function(d){return d.ensembleMember})\r\n                        .property('selected', function(d){\r\n                            // console.log(d.ensembleMember, \"ensemble.....member\", memberNumber)\r\n                            if(d.ensembleMember === memberNumber){\r\n                                return true;\r\n                            }else{\r\n                                return false;\r\n                            }\r\n                        })\r\n                        .text((d) => {return d.ensembleMember})\r\n\r\n        d3.select(divName).append('button')\r\n                        // .attr(\"id\", divName)\r\n                        .text(\"Previous\")\r\n                        .on(\"click\", function(){\r\n                            // console.log(idName)\r\n                            let previousIndex;\r\n                            let value = +($(`#timestep${idName}`).val());\r\n                            // console.log(value)\r\n                            let member = +($(`#member${idName}`).val());\r\n                            // console.log(member)\r\n                            let timeList = dataRegistry[(member - 1)].timeSteps\r\n                            // console.log(timeList)\r\n                            let index = timeList.indexOf(value);\r\n                            let total = timeList.length - 1;\r\n                            if(index != 0){\r\n                                previousIndex = index - 1;\r\n                            }else{\r\n                                previousIndex = total;\r\n                            }\r\n                            let folder = member;\r\n                            let file = timeList[previousIndex];\r\n                            $(`#timestep${idName}`).val(file)\r\n                            let container = new mainComponent()\r\n                            container.dataLoader(object, folder, file, threeDivname, objectForScatter, divForScatter)\r\n                            // console.log(list[nextIndex])\r\n                            // console.log(folder, file)\r\n                            \r\n                        })\r\n\r\n        d3.select(divName).append('label')\r\n                         .attr('for', 'timesteps')\r\n                         .text(\"Time steps\")\r\n\r\n        d3.select(divName).append('select')\r\n                        .attr('class', 'timesteps')\r\n                        .attr('id', `timestep${idName}`)\r\n                        .on(\"change\", function(){\r\n                            // console.log(memberNumber)\r\n                            let folder = +($(`#member${idName}`).val());;\r\n                            let file = this.value;\r\n                            // console.log(file)\r\n                            let container = new mainComponent();\r\n                            container.dataLoader(object, folder, file, threeDivname, objectForScatter, divForScatter)\r\n                        })\r\n                        .selectAll('option')\r\n                        .data(dataRegistry[(memberNumber - 1)].timeSteps)\r\n                        .enter()\r\n                        .append('option')\r\n                        .attr('id', function(d){ return d})\r\n                        .attr('value', function(d){return d})\r\n                        .text((d) => {return d})\r\n\r\n        d3.select(divName).append('button')\r\n                        // .attr('id', divName)\r\n                        .text(\"Next\")\r\n                        .on(\"click\", function(){\r\n                            // console.log(idName)\r\n                            let nextIndex;\r\n                            let value = +($(`#timestep${idName}`).val());\r\n                            // console.log(value)\r\n                            let member = +($(`#member${idName}`).val());\r\n                            // console.log(member)\r\n                            let timeList = dataRegistry[(member - 1)].timeSteps\r\n                            // console.log(timeList)\r\n                            let index = timeList.indexOf(value);\r\n                            let total = timeList.length - 1;\r\n                            if(index != total){\r\n                                nextIndex = (index % total) + 1;\r\n                            }else{\r\n                                nextIndex = 0;\r\n                            }\r\n                            let folder = member;\r\n                            let file = timeList[nextIndex];\r\n                            $(`#timestep${idName}`).val(file)\r\n                            let container = new mainComponent()\r\n                            container.dataLoader(object, folder, file, threeDivname, objectForScatter, divForScatter)                          \r\n                        })\r\n\r\n\r\n        function updateDropdown(folder, list, idName){\r\n            d3.select(`#timestep${idName}`).selectAll('option').remove()\r\n\r\n            d3.select(`#timestep${idName}`)\r\n                        // .on(\"change\", function(){\r\n                        //     // console.log(memberNumber)\r\n                        //     let folder = memberNumber;\r\n                        //     let file = this.value;\r\n                        //     // console.log(file)\r\n                        //     let container = new mainComponent();\r\n                        //     container.dataLoader(object, folder, file, threeDivname)\r\n                        // })\r\n                        .selectAll('option')\r\n                        .data(list)\r\n                        .enter()\r\n                        .append('option')\r\n                        .attr('id', function(d){ return d})\r\n                        .attr('value', function(d){return d})\r\n                        .text((d) => {return d})\r\n\r\n            let container = new mainComponent();\r\n            container.dataLoader(object, folder, list[0], threeDivname, objectForScatter, divForScatter)\r\n\r\n        }\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default DropdownPanel;",{"ruleId":"75","severity":1,"message":"76","line":7,"column":8,"nodeType":"77","messageId":"78","endLine":7,"endColumn":20},{"ruleId":"75","severity":1,"message":"79","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":20},{"ruleId":"75","severity":1,"message":"80","line":12,"column":8,"nodeType":"77","messageId":"78","endLine":12,"endColumn":20},{"ruleId":"75","severity":1,"message":"81","line":13,"column":8,"nodeType":"77","messageId":"78","endLine":13,"endColumn":20},{"ruleId":"75","severity":1,"message":"82","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":26},{"ruleId":"75","severity":1,"message":"83","line":5,"column":7,"nodeType":"77","messageId":"78","endLine":5,"endColumn":10},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"75","severity":1,"message":"80","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":20},{"ruleId":"75","severity":1,"message":"88","line":36,"column":15,"nodeType":"77","messageId":"78","endLine":36,"endColumn":21},{"ruleId":"75","severity":1,"message":"89","line":6,"column":10,"nodeType":"77","messageId":"78","endLine":6,"endColumn":22},{"ruleId":"75","severity":1,"message":"90","line":8,"column":7,"nodeType":"77","messageId":"78","endLine":8,"endColumn":12},{"ruleId":"75","severity":1,"message":"91","line":3,"column":13,"nodeType":"77","messageId":"78","endLine":3,"endColumn":17},{"ruleId":"75","severity":1,"message":"92","line":20,"column":13,"nodeType":"77","messageId":"78","endLine":20,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":67,"column":38,"nodeType":"95","messageId":"96","endLine":67,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":119,"column":38,"nodeType":"95","messageId":"96","endLine":119,"endColumn":40},"no-unused-vars","'Projection2D' is defined but never used.","Identifier","unusedVar","'Projection3D' is defined but never used.","'particleData' is defined but never used.","'dataRegistry' is defined but never used.","'ReplaceStencilOp' is defined but never used.","'url' is assigned a value but never used.","no-native-reassign",["97"],"no-negated-in-lhs",["98"],"'aspect' is assigned a value but never used.","'VertexColors' is defined but never used.","'style' is assigned a value but never used.","'data' is defined but never used.","'list' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]