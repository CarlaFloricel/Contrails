{"version":3,"sources":["components/query-panel/query-panel.component.jsx","components/parameters-plot/parameters-plot.component.jsx","components/clusters/clusters.component.jsx","components/projection-2d/projection-2d-d3.component.jsx","components/projection-2d/projection-2d.component.jsx","components/projection-3d/projection-3d.component.jsx","components/projection-3d/projection.component.jsx","components/dropdown-panel/dropdown-panel.component.jsx","components/components-container/components-container.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["QueryPanel","state","currentVal","value","fetch","method","mode","cache","headers","body","JSON","stringify","this","then","res","json","data","setState","val","React","Component","ParametersPlot","Clusters","ProjeProjection2DD3","scatterplot","domainData","xDomain","yDomain","element","d3","select","remove","width","node","clientWidth","height","clientHeight","margin","svg","append","attr","color","domain","min","max","range","x","xAxis","scale","y","yAxis","call","selectAll","enter","d","style","temp","Projection","sceneSetup","containerName","canvasName","scene","THREE","background","aspect","camera","position","z","renderer","setSize","controls","OrbitControls","domElement","appendChild","addCustomSceneObjects","tempColor","tempscaling","geometry","forEach","vertices","push","colors","cube","material","size","vertexColors","add","lights","set","startAnimationLoop","render","requestID","window","requestAnimationFrame","handleWindowResize","updateProjectionMatrix","widnowResizeHandler","addEventListener","DropdownPanel","createDropdown","object","threeDivname","memberNumber","divName","idName","objectForScatter","divForScatter","dataRegistry","timeSteps","text","on","folder","list","mainComponent","dataLoader","updateDropdown","ensembleMember","property","$","member","timeList","index","indexOf","total","length","file","dropdownObject1","dropdownObject2","threeObject1","threeObject2","scatterObject1","Scatter","scatterObject2","ComponentsContainer","dropdownCreator","dropdown","createScene","threediv","canvas","forPromise","div","Promise","resolve","url","tempDomain","parseFloat","Math","Infinity","console","log","particleData","threeDiv","updateThreeScatter","firstCanvas","createRef","firstThree","firstDropdown","firstScatter","secondCanvas","secondThree","secondDropdown","secondScatter","current","Container","fluid","Row","xs","Col","backgroundColor","ref","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.566b56b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass QueryPanel extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentVal: 0,\r\n            value:[4,5]\r\n        }\r\n    \r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch('/backendscript', {method:\"POST\", mode: 'cors', cache:\"no-cache\", headers:{\"content_type\":\"application/json\"},body:JSON.stringify(this.state.value)}).then(res => res.json()).then(data => this.setState({currentVal:data.val}))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>Query panel and val is {this.state.currentVal}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QueryPanel;","import React from 'react';\r\n\r\nclass ParametersPlot extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>Parameters panel</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ParametersPlot;","import React from 'react';\r\n\r\n\r\nclass Clusters extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>Clusters and other components</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clusters;","\r\nimport * as d3 from 'd3';\r\nimport { ReplaceStencilOp } from 'three';\r\n\r\nconst url =\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv\"\r\nexport default class ProjeProjection2DD3 {\r\n    scatterplot = (data, domainData, xDomain, yDomain, element) => {\r\n        d3.select(element).select('svg').remove()\r\n        const width = d3.select(element).node().clientWidth;\r\n        // console.log(d3.select(element).node())\r\n        // console.log(width)\r\n        const height = d3.select(element).node().clientHeight;\r\n\r\n        const margin = {left: 40, right: 10, top:20, bottom:20}\r\n        // console.log(height)\r\n        const svg = d3.select(element)\r\n                    .append(\"svg\")\r\n                    .attr(\"width\",width)\r\n                    .attr(\"height\",height)\r\n        let tempColor = [\"#fff5f0\",\"#67000d\"]\r\n        // console.log(domainData)\r\n        let color  = d3.scaleLinear(/*d3.schemeReds[9]*/)\r\n                        .domain([domainData.min, domainData.max])\r\n                        .range(tempColor);\r\n        let x  = d3.scaleLinear(/*d3.schemeReds[9]*/)\r\n                        .domain([xDomain.min, xDomain.max])\r\n                        .range([ margin.left , width - margin.right ]);\r\n        let xAxis = d3.axisBottom()\r\n                      .scale(x)\r\n                      // .ticks(5);\r\n\r\n        let y  = d3.scaleLinear(/*d3.schemeReds[9]*/)\r\n                        .domain([yDomain.min, yDomain.max])\r\n                        .range([ height - margin.bottom, margin.top]);\r\n\r\n        let yAxis = d3.axisLeft()\r\n                      .scale(y)\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(0,\" + (height -margin.top) + \")\")\r\n            .call(xAxis);\r\n        \r\n        svg.append(\"g\")\r\n            .attr(\"transform\", `translate(${margin.left},0)`)\r\n            .call(yAxis);\r\n                      \r\n        // Add dots\r\n        svg.append('g')\r\n          .selectAll(\"dot\")\r\n          .data(data)\r\n          .enter()\r\n          .append(\"circle\")\r\n            .attr(\"cx\", function (d) { return x(d.x); } )\r\n            .attr(\"cy\", function (d) { return y(d.y); } )\r\n            .attr(\"r\", 1.5)\r\n            .style(\"fill\", function(d){ return color(d.temp)})\r\n\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ProjeProjection2DD3 from './projection-2d-d3.component';\r\n\r\nclass Projection2D extends React.Component {\r\n    componentDidMount(){\r\n        new ProjeProjection2DD3(this.refs.chart)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div ref=\"chart\"></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projection2D;","import React from 'react';\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport particleData from '../data-component/particleData';\r\nimport * as d3 from 'd3'\r\n\r\nconst style = {\r\n    height: 240 // we can control scene size by setting container dimensions\r\n  };\r\n\r\nclass Projection3D extends React.Component {\r\n    componentDidMount() {\r\n        this.sceneSetup();\r\n        const url = 'https://raw.githubusercontent.com/nafiul-nipu/High-Performance-Contrails-Visualization/master/particles/timestep_21.csv'\r\n        this.addCustomSceneObjects(url);        \r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleWindowResize);\r\n        window.cancelAnimationFrame(this.requestID);\r\n        this.controls.dispose();\r\n      }\r\n    \r\n      // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\r\n      // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\r\n      sceneSetup = () => {\r\n        // get container dimensions and use them for scene sizing\r\n        const width = this.el.clientWidth;\r\n        const height = this.el.clientHeight;\r\n    \r\n        this.scene = new THREE.Scene();\r\n\r\n        //camera\r\n        const fieldOfView = 4;\r\n        const aspect = width / height;\r\n        const near = 0.5;\r\n        const far = 1000;\r\n\r\n\r\n        this.camera = new THREE.PerspectiveCamera(\r\n          fieldOfView, // fov = field of view\r\n          width / height, // aspect ratio\r\n          near, // near plane\r\n          far // far plane\r\n        );\r\n        // this.camera.position.x = 30;\r\n        // this.camera.position.y = 10\r\n        this.camera.position.z = 40; // is used here to set some distance from a cube that is located at z = 0\r\n        // OrbitControls allow a camera to orbit around the object\r\n        // https://threejs.org/docs/#examples/controls/OrbitControls\r\n        this.controls = new OrbitControls(this.camera, this.el);\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(width, height);\r\n        this.el.appendChild(this.renderer.domElement); // mount using React ref\r\n      };\r\n    \r\n      // Here should come custom code.\r\n      // Code below is taken from Three.js BoxGeometry example\r\n      // https://threejs.org/docs/#api/en/geometries/BoxGeometry\r\n      addCustomSceneObjects = (url) => {\r\n        this.data = []\r\n        // const url = 'https://raw.githubusercontent.com/nafiul-nipu/High-Performance-Contrails-Visualization/master/particles/timestep_21.csv'\r\n        d3.csv(url, d => {\r\n            this.data.push({\r\n                x: parseFloat(d['Points:0']),\r\n                y: parseFloat(d['Points:1']),\r\n                z: parseFloat(d['Points:2'])\r\n            });\r\n        }).then(() =>{\r\n            console.log(this.data)\r\n            // console.log(this.props.data)\r\n            const geometry = new THREE.Geometry();\r\n            const material = new THREE.PointsMaterial({\r\n              color: 0x156289,\r\n              // emissive: 0x072534,\r\n              size: 0.2\r\n              // side: THREE.DoubleSide,\r\n              // flatShading: true\r\n            });\r\n\r\n            this.data.forEach(function(d){ \r\n              let particle = new THREE.Vector3(d.x, d.y, d.z);\r\n              geometry.vertices.push(particle)\r\n\r\n            })\r\n            \r\n            this.cube = new THREE.Points(geometry, material);\r\n            this.scene.add(this.cube);\r\n        \r\n            const lights = [];\r\n            lights[0] = new THREE.PointLight(0xffffff, 1, 0);\r\n            lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n            lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n        \r\n            lights[0].position.set(0, 200, 0);\r\n            lights[1].position.set(100, 200, 100);\r\n            lights[2].position.set(-100, -200, -100);\r\n        \r\n            this.scene.add(lights[0]);\r\n            this.scene.add(lights[1]);\r\n            this.scene.add(lights[2]);\r\n\r\n            this.startAnimationLoop();\r\n            })\r\n          };\r\n    \r\n      startAnimationLoop = () => {\r\n        // this.cube.rotation.x += 0.01;\r\n        // this.cube.rotation.y += 0.01;\r\n    \r\n        this.renderer.render(this.scene, this.camera);\r\n    \r\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n        // an animation and requests that the browser call a specified function\r\n        // to update an animation before the next repaint\r\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\r\n      };\r\n    \r\n      handleWindowResize = () => {\r\n        const width = this.el.clientWidth;\r\n        const height = this.el.clientHeight;\r\n    \r\n        this.renderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n    \r\n        // Note that after making changes to most of camera properties you have to call\r\n        // .updateProjectionMatrix for the changes to take effect.\r\n        this.camera.updateProjectionMatrix();\r\n      };\r\n\r\n      test = () => {\r\n        return 5\r\n      }\r\n    \r\n      render() {\r\n        // console.log(this.props.data)\r\n        return <div style={style} ref={ref => (this.el = ref)} />;\r\n      }\r\n    }\r\n\r\nexport default Projection3D;\r\n","import React from 'react';\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport * as d3 from 'd3'\r\nimport { VertexColors } from 'three';\r\n\r\nconst style = {\r\n    height: 240 // we can control scene size by setting container dimensions\r\n  };\r\n\r\nclass Projection extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.renderer = null;\r\n        this.controls = null;\r\n    }    \r\n\r\n      // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\r\n      // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\r\n      sceneSetup = (containerName, canvasName) => {\r\n        // get container dimensions and use them for scene sizing\r\n        const width = d3.select(containerName).node().clientWidth\r\n        // console.log(width)\r\n        const height = d3.select(containerName).node().clientHeight;\r\n        // console.log(height)\r\n    \r\n        this.scene = new THREE.Scene();\r\n        // var scene = new THREE.Scene(); // initialising the scene\r\n        this.scene.background = new THREE.Color( 0x31393F );\r\n\r\n        //camera\r\n        const fieldOfView = 4;\r\n        const aspect = width / height;\r\n        const near = 0.5;\r\n        const far = 1000;\r\n\r\n\r\n        this.camera = new THREE.PerspectiveCamera(\r\n          fieldOfView, // fov = field of view\r\n          aspect, // aspect ratio\r\n          near, // near plane\r\n          far // far plane\r\n        );\r\n        // this.camera.position.x = 30;\r\n        // this.camera.position.y = 10\r\n        this.camera.position.z = 40; // is used here to set some distance from a cube that is located at z = 0\r\n        // OrbitControls allow a camera to orbit around the object\r\n        // https://threejs.org/docs/#examples/controls/OrbitControls\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        // this.renderer.setClearColor('hsl(0, 0%, 0%)', 0);\r\n        this.renderer.setSize(width, height);\r\n        // this.renderer.setPixelRatio(window.devicePixelRatio)\r\n\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n\r\n        canvasName.appendChild(this.renderer.domElement); // mount using React ref\r\n      };\r\n    \r\n\r\n      //adding the particle system\r\n      addCustomSceneObjects = (data, domainData) => {\r\n        this.tempColor = [\"#fff5f0\",\"#67000d\"]\r\n        // console.log(domainData)\r\n        let tempscaling = d3.scaleLinear(/*d3.schemeReds[9]*/)\r\n                        .domain([domainData.min, domainData.max])\r\n                        .range(this.tempColor);\r\n\r\n        // console.log(tempscaling(292))\r\n\r\n        // console.log(this.props.data)\r\n        let geometry = new THREE.Geometry();\r\n        // console.log(data)\r\n        data.forEach(function(d){ \r\n          geometry.vertices.push(new THREE.Vector3(d.x, d.y, d.z));\r\n          let color = tempscaling(d.temp)\r\n        //   console.log(color)\r\n          geometry.colors.push(new THREE.Color(color));\r\n        })\r\n        if(this.cube){\r\n          this.scene.remove(this.cube)\r\n        }\r\n        \r\n        let material = new THREE.PointsMaterial({\r\n            //   color: 0x156289,\r\n              // emissive: 0x072534,\r\n              size: 0.2,\r\n              // side: THREE.DoubleSide,\r\n              // flatShading: true\r\n              vertexColors: true\r\n            });\r\n\r\n        this.cube = new THREE.Points(geometry, material);\r\n        this.scene.add(this.cube);\r\n    \r\n        const lights = [];\r\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n    \r\n        lights[0].position.set(0, 200, 0);\r\n        lights[1].position.set(100, 200, 100);\r\n        lights[2].position.set(-100, -200, -100);\r\n    \r\n        this.scene.add(lights[0]);\r\n        this.scene.add(lights[1]);\r\n        this.scene.add(lights[2]);\r\n\r\n        this.startAnimationLoop();\r\n        \r\n      };\r\n    \r\n      startAnimationLoop = () => {\r\n        // this.cube.rotation.x += 0.01;\r\n        // this.cube.rotation.y += 0.01;\r\n    \r\n        this.renderer.render(this.scene, this.camera);\r\n    \r\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n        // an animation and requests that the browser call a specified function\r\n        // to update an animation before the next repaint\r\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\r\n      };\r\n    \r\n      handleWindowResize = (containerName) => {\r\n        const width = d3.select(containerName).node().clientWidth\r\n        // console.log(width)\r\n        const height = d3.select(containerName).node().clientHeight;\r\n    \r\n        this.renderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n    \r\n        // Note that after making changes to most of camera properties you have to call\r\n        // .updateProjectionMatrix for the changes to take effect.\r\n        this.camera.updateProjectionMatrix();\r\n      };\r\n\r\n      widnowResizeHandler = (containerName) => {\r\n        window.addEventListener(\"resize\", this.handleWindowResize(containerName));\r\n      }\r\n    }\r\n\r\nexport default Projection;\r\n","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport $, { data } from 'jquery'\r\n\r\nimport dataRegistry from '../data-component/dataRegistry.json'\r\n\r\nimport mainComponent from '../components-container/components-container.component'\r\n\r\nclass DropdownPanel extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n    createDropdown = (object,threeDivname, memberNumber, divName, idName, objectForScatter, divForScatter) =>{\r\n        let list = dataRegistry[(memberNumber - 1)].timeSteps;\r\n        // console.log(divName.className)\r\n        d3.select(divName).append('label')\r\n                         .attr('for', 'members')\r\n                         .text(\"Members: \")\r\n\r\n        d3.select(divName).append('select')\r\n                        .attr('class', \"members\")\r\n                        .attr(\"id\", `member${idName}`)\r\n                        .on('change', function(){\r\n                            let folder = this.value\r\n                            let list = dataRegistry[(folder - 1)].timeSteps\r\n                            // console.log(folder)\r\n                            // console.log(list)\r\n                            updateDropdown(folder, list, idName)\r\n                        })\r\n                        .selectAll('option')\r\n                        .data(dataRegistry)\r\n                        .enter()\r\n                        .append('option')\r\n                        .attr('id', function(d){ return d.ensembleMember})\r\n                        .attr(\"value\", function(d){return d.ensembleMember})\r\n                        .property('selected', function(d){\r\n                            // console.log(d.ensembleMember, \"ensemble.....member\", memberNumber)\r\n                            if(d.ensembleMember === memberNumber){\r\n                                return true;\r\n                            }else{\r\n                                return false;\r\n                            }\r\n                        })\r\n                        .text((d) => {return d.ensembleMember})\r\n\r\n        d3.select(divName).append('button')\r\n                        // .attr(\"id\", divName)\r\n                        .text(\"Previous\")\r\n                        .on(\"click\", function(){\r\n                            // console.log(idName)\r\n                            let previousIndex;\r\n                            let value = +($(`#timestep${idName}`).val());\r\n                            // console.log(value)\r\n                            let member = +($(`#member${idName}`).val());\r\n                            // console.log(member)\r\n                            let timeList = dataRegistry[(member - 1)].timeSteps\r\n                            // console.log(timeList)\r\n                            let index = timeList.indexOf(value);\r\n                            let total = timeList.length - 1;\r\n                            if(index != 0){\r\n                                previousIndex = index - 1;\r\n                            }else{\r\n                                previousIndex = total;\r\n                            }\r\n                            let folder = member;\r\n                            let file = timeList[previousIndex];\r\n                            $(`#timestep${idName}`).val(file)\r\n                            let container = new mainComponent()\r\n                            container.dataLoader(object, folder, file, threeDivname, objectForScatter, divForScatter)\r\n                            // console.log(list[nextIndex])\r\n                            // console.log(folder, file)\r\n                            \r\n                        })\r\n\r\n        d3.select(divName).append('label')\r\n                         .attr('for', 'timesteps')\r\n                         .text(\"Time steps\")\r\n\r\n        d3.select(divName).append('select')\r\n                        .attr('class', 'timesteps')\r\n                        .attr('id', `timestep${idName}`)\r\n                        .on(\"change\", function(){\r\n                            // console.log(memberNumber)\r\n                            let folder = +($(`#member${idName}`).val());;\r\n                            let file = this.value;\r\n                            // console.log(file)\r\n                            let container = new mainComponent();\r\n                            container.dataLoader(object, folder, file, threeDivname, objectForScatter, divForScatter)\r\n                        })\r\n                        .selectAll('option')\r\n                        .data(dataRegistry[(memberNumber - 1)].timeSteps)\r\n                        .enter()\r\n                        .append('option')\r\n                        .attr('id', function(d){ return d})\r\n                        .attr('value', function(d){return d})\r\n                        .text((d) => {return d})\r\n\r\n        d3.select(divName).append('button')\r\n                        // .attr('id', divName)\r\n                        .text(\"Next\")\r\n                        .on(\"click\", function(){\r\n                            // console.log(idName)\r\n                            let nextIndex;\r\n                            let value = +($(`#timestep${idName}`).val());\r\n                            // console.log(value)\r\n                            let member = +($(`#member${idName}`).val());\r\n                            // console.log(member)\r\n                            let timeList = dataRegistry[(member - 1)].timeSteps\r\n                            // console.log(timeList)\r\n                            let index = timeList.indexOf(value);\r\n                            let total = timeList.length - 1;\r\n                            if(index != total){\r\n                                nextIndex = (index % total) + 1;\r\n                            }else{\r\n                                nextIndex = 0;\r\n                            }\r\n                            let folder = member;\r\n                            let file = timeList[nextIndex];\r\n                            $(`#timestep${idName}`).val(file)\r\n                            let container = new mainComponent()\r\n                            container.dataLoader(object, folder, file, threeDivname, objectForScatter, divForScatter)                          \r\n                        })\r\n\r\n\r\n        function updateDropdown(folder, list, idName){\r\n            d3.select(`#timestep${idName}`).selectAll('option').remove()\r\n\r\n            d3.select(`#timestep${idName}`)\r\n                        // .on(\"change\", function(){\r\n                        //     // console.log(memberNumber)\r\n                        //     let folder = memberNumber;\r\n                        //     let file = this.value;\r\n                        //     // console.log(file)\r\n                        //     let container = new mainComponent();\r\n                        //     container.dataLoader(object, folder, file, threeDivname)\r\n                        // })\r\n                        .selectAll('option')\r\n                        .data(list)\r\n                        .enter()\r\n                        .append('option')\r\n                        .attr('id', function(d){ return d})\r\n                        .attr('value', function(d){return d})\r\n                        .text((d) => {return d})\r\n\r\n            let container = new mainComponent();\r\n            container.dataLoader(object, folder, list[0], threeDivname, objectForScatter, divForScatter)\r\n\r\n        }\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default DropdownPanel;","import React from 'react';\r\nimport * as d3 from 'd3'\r\n\r\nimport QueryPanel from '../query-panel/query-panel.component';\r\nimport ParametersPlot from '../parameters-plot/parameters-plot.component';\r\nimport Clusters from '../clusters/clusters.component';\r\nimport Projection2D from '../projection-2d/projection-2d.component';\r\nimport Projection3D from '../projection-3d/projection-3d.component';\r\nimport Projection from '../projection-3d/projection.component'\r\nimport DropdownPanel from '../dropdown-panel/dropdown-panel.component';\r\n\r\nimport particleData from '../data-component/particleData'\r\nimport dataRegistry from '../data-component/dataRegistry.json'\r\nimport Scatter from '../projection-2d/projection-2d-d3.component'\r\n\r\nimport './components-container.styles.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n//creating objects at the very first\r\nlet dropdownObject1 = new DropdownPanel();\r\nlet dropdownObject2 = new DropdownPanel();\r\nlet idName1 = 'firstDropdown'\r\nlet idName2 = 'secondDropdown'\r\nlet threeObject1 = new Projection();\r\nlet threeObject2 = new Projection();\r\nlet scatterObject1 = new Scatter();\r\nlet scatterObject2 = new Scatter();\r\n\r\nclass ComponentsContainer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n\r\n        this.firstCanvas = React.createRef(); \r\n        this.firstThree = React.createRef(); \r\n        this.firstDropdown = React.createRef();\r\n        this.firstScatter = React.createRef();\r\n\r\n\r\n        this.secondCanvas = React.createRef(); \r\n        this.secondThree = React.createRef(); \r\n        this.secondDropdown = React.createRef();\r\n        this.secondScatter = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){ \r\n        // console.log(dataRegistry[1].timeSteps[0])\r\n        //data registry is a json file manually added the member and data names\r\n        // creating the dropdowns first\r\n        // by default first and second member will be selected\r\n        this.dropdownCreator(threeObject1, this.firstThree.current, dropdownObject1, 1, this.firstDropdown.current, idName1,scatterObject1, this.firstScatter.current)\r\n        this.dropdownCreator(threeObject2, this.secondThree.current, dropdownObject2, 2, this.secondDropdown.current, idName2, scatterObject2, this.secondScatter.current)\r\n\r\n        //creating the first particlesystem\r\n        //we want the scene loaded \r\n        //then the particle system will change.. no need to render the scene everytime?\r\n        this.createScene(threeObject1, this.firstThree.current, this.firstCanvas.current)\r\n        this.createScene(threeObject2, this.secondThree.current, this.secondCanvas.current)\r\n\r\n        //now we want to load the data particle system and the scatter plot\r\n        this.forPromise(threeObject1, 1, 2.305, this.firstThree.current, scatterObject1, this.firstScatter.current).then(function(){\r\n            console.log(\"first 3D loaded\")\r\n        })\r\n\r\n        this.forPromise(threeObject2, 2, 2.3075, this.secondThree.current, scatterObject2, this.secondScatter.current).then(function(){\r\n            console.log(\"second 3D loaded\")\r\n        })      \r\n        \r\n    }\r\n\r\n    dropdownCreator = (object, threeDivname, dropdown, memberNumber, divName, idName, objectForScatter, divForScatter) =>{        \r\n        dropdown.createDropdown(object,threeDivname, memberNumber, divName, idName, objectForScatter, divForScatter)\r\n    }\r\n\r\n    createScene = (object, threediv, canvas) =>{\r\n        object.sceneSetup(threediv, canvas)\r\n        // console.log(\"createScene\")\r\n        // console.log(three)\r\n    }\r\n\r\n    forPromise = (object, folder, file, div, objectForScatter, divForScatter) =>{\r\n        return Promise.resolve(this.dataLoader(object, folder, file, div, objectForScatter, divForScatter))\r\n\r\n    }\r\n\r\n    dataLoader = (object, folder, file, divName, objectForScatter, divForScatter) =>{\r\n        let url = `https://raw.githubusercontent.com/CarlaFloricel/Contrails/nafiul-testing/src/data/${folder}/${file}.csv`\r\n        let data = []\r\n        let tempDomain = {}\r\n        let xDomain = {}\r\n        let yDomain = {}\r\n        d3.csv(url, d => {\r\n        data.push({\r\n            x: parseFloat(d['Points:0']),\r\n            y: parseFloat(d['Points:1']),\r\n            z: parseFloat(d['Points:2']),\r\n            temp: parseFloat(d['T'])\r\n        });\r\n        tempDomain.min = Math.min(tempDomain.min || Infinity, parseFloat(d['T']));\r\n        tempDomain.max = Math.max(tempDomain.max || -Infinity, parseFloat(d['T']));\r\n\r\n        xDomain.min = Math.min(xDomain.min || Infinity, parseFloat(d['Points:0']));\r\n        xDomain.max = Math.max(xDomain.max || -Infinity, parseFloat(d['Points:0']));\r\n\r\n        yDomain.min = Math.min(yDomain.min || Infinity, parseFloat(d['Points:1']));\r\n        yDomain.max = Math.max(yDomain.max || -Infinity, parseFloat(d['Points:1']));\r\n        }).then(function(){\r\n            console.log(\"data\")\r\n            // console.log(data)\r\n            // console.log(tempDomain)\r\n            // console.log(divName)\r\n            // console.log(three)\r\n            // three.addCustomSceneObjects(data, tempDomain);        \r\n            // three.widnowResizeHandler(divName)\r\n            updateThreeScatter(object, data, tempDomain, divName, objectForScatter, divForScatter)\r\n        })\r\n\r\n        function updateThreeScatter(object, particleData, tempDomain, threeDiv, objectForScatter, divForScatter){\r\n            object.addCustomSceneObjects(particleData, tempDomain);        \r\n            object.widnowResizeHandler(threeDiv)\r\n            // console.log(tempDomain, xDomain, yDomain)\r\n            objectForScatter.scatterplot(particleData, tempDomain, xDomain, yDomain, divForScatter)\r\n\r\n            console.log(\"updated\")\r\n\r\n        }\r\n\r\n    }\r\n   \r\n\r\n    render(){\r\n        return(\r\n            <Container fluid >\r\n                <Row xs={12}>\r\n                    <Col xs={2} style={{backgroundColor: '#b2182b',height:'100vh'}}>\r\n                        <QueryPanel/>\r\n                    </Col>\r\n                    <Col xs={6}style={{height:'100vh'}}>\r\n                    <Row xs={3}> \r\n                            {/* 3d view and the dropdown */}\r\n                            <Col xs={6}>\r\n                                <Row xs={2}>\r\n                                    <Col xs={12} style={{height:'3vh'}}>\r\n                                        {/* <DropdownPanel/> */}\r\n                                        <div ref={this.firstDropdown} ></div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row xs={10}>\r\n                                    <Col xs={12} style={{height:'22vh'}} ref = {this.firstThree}>\r\n                                    <div ref = {this.firstCanvas}></div>\r\n                                        {/* <Projection/> */}\r\n                                    </Col>                                    \r\n                                </Row>\r\n                            </Col>\r\n                            {/* 2d view */}\r\n                            <Col xs={6} style={{backgroundColor: '#636363',height:'25vh'}} ref = {this.firstScatter}>\r\n                                {/* <Projection2D/> */}\r\n                                {/* <div ref = {this.firstScatter}></div> */}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row xs={3}> \r\n                            {/* 3d view and the dropdown */}\r\n                            <Col xs={6}>\r\n                                <Row xs={2}>\r\n                                    <Col xs={12} style={{height:'3vh'}}>\r\n                                        {/* <DropdownPanel/> */}\r\n                                        <div ref={this.secondDropdown}></div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row xs={10}>\r\n                                    <Col xs={12} style={{height:'22vh'}} ref={this.secondThree}>\r\n                                        <div ref = {this.secondCanvas}></div>\r\n                                    </Col>                                    \r\n                                </Row>\r\n                            </Col>\r\n                            {/* 2d view */}\r\n                            <Col xs={6} style={{backgroundColor: '#636363',height:'25vh'}}  ref = {this.secondScatter}>\r\n                                {/* <Projection2D/> */}\r\n                                {/* <div ref = {this.secondScatter}></div> */}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row xs={6}>\r\n                            <Col xs={12}style={{backgroundColor: '#67a9cf',height:'50vh'}}>\r\n                                <Clusters/>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs={4}style={{backgroundColor: '#2166ac',height:'100vh'}}>\r\n                        <ParametersPlot/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ComponentsContainer;","import React, { Component } from \"react\";\nimport './App.css';\nimport ComponentsContainer from './components/components-container/components-container.component'\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n\n          \n         <ComponentsContainer/>\n    </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}