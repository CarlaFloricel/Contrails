{"version":3,"sources":["components/query-panel/query-panel.component.jsx","components/parameters-plot/parameters-plot.component.jsx","components/clusters/clusters.component.jsx","components/projection-2d/projection-2d-d3.component.jsx","components/projection-2d/projection-2d.component.jsx","components/projection-3d/projection-3d.component.jsx","components/components-container/components-container.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["QueryPanel","state","currentVal","value","fetch","method","mode","cache","headers","body","JSON","stringify","this","then","res","json","data","setState","val","React","Component","ParametersPlot","Clusters","ProjeProjection2DD3","element","svg","d3","append","attr","x","domain","range","call","y","selectAll","enter","d","GrLivArea","SalePrice","style","Projection2D","refs","chart","ref","height","Projection3D","sceneSetup","width","el","clientWidth","clientHeight","scene","THREE","camera","position","z","controls","OrbitControls","renderer","setSize","appendChild","domElement","addCustomSceneObjects","geometry","material","color","emissive","side","flatShading","cube","add","lights","set","startAnimationLoop","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ComponentsContainer","Container","fluid","Row","xs","Col","backgroundColor","sm","md","lg","xl","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e615dfb5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass QueryPanel extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentVal: 0,\r\n            value:[4,5]\r\n        }\r\n    \r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch('/backendscript', {method:\"POST\", mode: 'cors', cache:\"no-cache\", headers:{\"content_type\":\"application/json\"},body:JSON.stringify(this.state.value)}).then(res => res.json()).then(data => this.setState({currentVal:data.val}))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>Query panel and val is {this.state.currentVal}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QueryPanel;","import React from 'react';\r\n\r\nclass ParametersPlot extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>Parameters panel</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ParametersPlot;","import React from 'react';\r\n\r\n\r\nclass Clusters extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>Clusters</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clusters;","\r\nimport * as d3 from 'd3';\r\nimport { ReplaceStencilOp } from 'three';\r\n\r\nconst url =\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv\"\r\nexport default class ProjeProjection2DD3 {\r\n    constructor(element){\r\n        const width=300\r\n        const height=200\r\n        const svg = d3.select(element)\r\n                    .append(\"svg\")\r\n                    .attr(\"width\",400)\r\n                    .attr(\"height\",240)\r\n\r\n                    d3.csv(url).then(data => {\r\n\r\n                        // Add X axis\r\n                        var x = d3.scaleLinear()\r\n                          .domain([0, 4000])\r\n                          .range([ 0, width ]);\r\n                        svg.append(\"g\")\r\n                          .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                          .call(d3.axisBottom(x));\r\n                      \r\n                        // Add Y axis\r\n                        var y = d3.scaleLinear()\r\n                          .domain([0, 500000])\r\n                          .range([ height, 0]);\r\n                        svg.append(\"g\")\r\n                          .call(d3.axisLeft(y));\r\n                      \r\n                        // Add dots\r\n                        svg.append('g')\r\n                          .selectAll(\"dot\")\r\n                          .data(data)\r\n                          .enter()\r\n                          .append(\"circle\")\r\n                            .attr(\"cx\", function (d) { return x(d.GrLivArea); } )\r\n                            .attr(\"cy\", function (d) { return y(d.SalePrice); } )\r\n                            .attr(\"r\", 1.5)\r\n                            .style(\"fill\", \"#69b3a2\")\r\n                      \r\n                      })\r\n\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ProjeProjection2DD3 from './projection-2d-d3.component';\r\n\r\nclass Projection2D extends React.Component {\r\n    componentDidMount(){\r\n        new ProjeProjection2DD3(this.refs.chart)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div ref=\"chart\"></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projection2D;","import React from 'react';\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst style = {\r\n    height: 240 // we can control scene size by setting container dimensions\r\n  };\r\n\r\nclass Projection3D extends React.Component {\r\n    componentDidMount() {\r\n        this.sceneSetup();\r\n        this.addCustomSceneObjects();\r\n        this.startAnimationLoop();\r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleWindowResize);\r\n        window.cancelAnimationFrame(this.requestID);\r\n        this.controls.dispose();\r\n      }\r\n    \r\n      // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\r\n      // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\r\n      sceneSetup = () => {\r\n        // get container dimensions and use them for scene sizing\r\n        const width = this.el.clientWidth;\r\n        const height = this.el.clientHeight;\r\n    \r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(\r\n          75, // fov = field of view\r\n          width / height, // aspect ratio\r\n          0.1, // near plane\r\n          1000 // far plane\r\n        );\r\n        this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\r\n        // OrbitControls allow a camera to orbit around the object\r\n        // https://threejs.org/docs/#examples/controls/OrbitControls\r\n        this.controls = new OrbitControls(this.camera, this.el);\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(width, height);\r\n        this.el.appendChild(this.renderer.domElement); // mount using React ref\r\n      };\r\n    \r\n      // Here should come custom code.\r\n      // Code below is taken from Three.js BoxGeometry example\r\n      // https://threejs.org/docs/#api/en/geometries/BoxGeometry\r\n      addCustomSceneObjects = () => {\r\n        const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n        const material = new THREE.MeshPhongMaterial({\r\n          color: 0x156289,\r\n          emissive: 0x072534,\r\n          side: THREE.DoubleSide,\r\n          flatShading: true\r\n        });\r\n        this.cube = new THREE.Mesh(geometry, material);\r\n        this.scene.add(this.cube);\r\n    \r\n        const lights = [];\r\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n    \r\n        lights[0].position.set(0, 200, 0);\r\n        lights[1].position.set(100, 200, 100);\r\n        lights[2].position.set(-100, -200, -100);\r\n    \r\n        this.scene.add(lights[0]);\r\n        this.scene.add(lights[1]);\r\n        this.scene.add(lights[2]);\r\n      };\r\n    \r\n      startAnimationLoop = () => {\r\n        this.cube.rotation.x += 0.01;\r\n        this.cube.rotation.y += 0.01;\r\n    \r\n        this.renderer.render(this.scene, this.camera);\r\n    \r\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n        // an animation and requests that the browser call a specified function\r\n        // to update an animation before the next repaint\r\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\r\n      };\r\n    \r\n      handleWindowResize = () => {\r\n        const width = this.el.clientWidth;\r\n        const height = this.el.clientHeight;\r\n    \r\n        this.renderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n    \r\n        // Note that after making changes to most of camera properties you have to call\r\n        // .updateProjectionMatrix for the changes to take effect.\r\n        this.camera.updateProjectionMatrix();\r\n      };\r\n    \r\n      render() {\r\n        return <div style={style} ref={ref => (this.el = ref)} />;\r\n      }\r\n    }\r\n\r\nexport default Projection3D;\r\n\r\n\r\n\r\n\r\n// class Projection3D extends Component {\r\n// componentDidMount() {\r\n//     var scene = new THREE.Scene();\r\n//     var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n//     var renderer = new THREE.WebGLRenderer();\r\n//     renderer.setSize( window.innerWidth, window.innerHeight );\r\n//     // document.body.appendChild( renderer.domElement );\r\n//     // use ref as a mount point of the Three.js scene instead of the document.body\r\n//     this.mount.appendChild( renderer.domElement );\r\n//     var geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n//     var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n//     var cube = new THREE.Mesh( geometry, material );\r\n//     scene.add( cube );\r\n//     camera.position.z = 5;\r\n//     var animate = function () {\r\n//       requestAnimationFrame( animate );\r\n//       cube.rotation.x += 0.01;\r\n//       cube.rotation.y += 0.01;\r\n//       renderer.render( scene, camera );\r\n//     };\r\n//     animate();\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div ref={ref => (this.mount = ref)} />\r\n//     )\r\n//   }\r\n// }","import React from 'react';\r\n\r\nimport QueryPanel from '../query-panel/query-panel.component';\r\nimport ParametersPlot from '../parameters-plot/parameters-plot.component';\r\nimport Clusters from '../clusters/clusters.component';\r\nimport Projection2D from '../projection-2d/projection-2d.component';\r\nimport Projection3D from '../projection-3d/projection-3d.component';\r\n\r\nimport './components-container.styles.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass ComponentsContainer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <Container fluid >\r\n                <Row xs={12}>\r\n                    <Col xs={2} style={{backgroundColor: '#b2182b',height:'100vh'}}>\r\n                        <QueryPanel/>\r\n                    </Col>\r\n                    <Col xs={6}style={{height:'100vh'}}>\r\n                        <Row xs={2} sm={2} md={2} lg={2} xl={2}>\r\n                            <Col xs={6}style={{height:'25vh'}}>\r\n                                <Projection3D/>\r\n                            </Col>\r\n                            <Col xs={6}style={{backgroundColor: '#d1e5f0',height:'25vh'}}>\r\n                                <Projection2D/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row xs={2} sm={2} md={2} lg={2} xl={2}>\r\n                            <Col xs={6}style={{height:'25vh'}}>\r\n                                <Projection3D/>\r\n                            </Col>\r\n                            <Col xs={6}style={{backgroundColor: '#fddbc7',height:'25vh'}}>\r\n                                <Projection2D/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row xs={8}>\r\n                            <Col xs={12}style={{backgroundColor: '#67a9cf',height:'50vh'}}>\r\n                                <Clusters/>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs={4}style={{backgroundColor: '#2166ac',height:'100vh'}}>\r\n                        <ParametersPlot/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ComponentsContainer;","import React, { Component } from \"react\";\nimport './App.css';\nimport ComponentsContainer from './components/components-container/components-container.component'\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n\n          \n         <ComponentsContainer/>\n    </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}